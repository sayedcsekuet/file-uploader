// Code generated by mockery 2.7.4. DO NOT EDIT.

package mocks

import (
	echo "github.com/labstack/echo"

	mock "github.com/stretchr/testify/mock"

	models "file-uploader/src/models"

	multipart "mime/multipart"
)

// FormCollector is an autogenerated mock type for the FormCollector type
type FormCollector struct {
	mock.Mock
}

// Collect provides a mock function with given fields: form
func (_m *FormCollector) Collect(form *multipart.Form) ([]*multipart.FileHeader, error) {
	ret := _m.Called(form)

	var r0 []*multipart.FileHeader
	if rf, ok := ret.Get(0).(func(*multipart.Form) []*multipart.FileHeader); ok {
		r0 = rf(form)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*multipart.FileHeader)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*multipart.Form) error); ok {
		r1 = rf(form)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CollectFileCreateData provides a mock function with given fields: form
func (_m *FormCollector) CollectFileCreateData(form *multipart.Form) (*models.CreateFileData, error) {
	ret := _m.Called(form)

	var r0 *models.CreateFileData
	if rf, ok := ret.Get(0).(func(*multipart.Form) *models.CreateFileData); ok {
		r0 = rf(form)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.CreateFileData)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*multipart.Form) error); ok {
		r1 = rf(form)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CollectFileCreateDataFromContext provides a mock function with given fields: c
func (_m *FormCollector) CollectFileCreateDataFromContext(c echo.Context) (*models.CreateFileData, error) {
	ret := _m.Called(c)

	var r0 *models.CreateFileData
	if rf, ok := ret.Get(0).(func(echo.Context) *models.CreateFileData); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.CreateFileData)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(echo.Context) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CollectFromContext provides a mock function with given fields: c
func (_m *FormCollector) CollectFromContext(c echo.Context) ([]*multipart.FileHeader, error) {
	ret := _m.Called(c)

	var r0 []*multipart.FileHeader
	if rf, ok := ret.Get(0).(func(echo.Context) []*multipart.FileHeader); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*multipart.FileHeader)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(echo.Context) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
