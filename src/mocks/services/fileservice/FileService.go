// Code generated by mockery 2.7.4. DO NOT EDIT.

package mocks

import (
	fileservice "file-uploader/src/services/fileservice"
	filestorage "file-uploader/src/services/filestorage"

	mock "github.com/stretchr/testify/mock"

	models "file-uploader/src/models"

	repositories "file-uploader/src/repositories"
)

// FileService is an autogenerated mock type for the FileService type
type FileService struct {
	mock.Mock
}

// Create provides a mock function with given fields: ownerId, createFileData
func (_m *FileService) Create(ownerId string, createFileData *models.CreateFileData) []*fileservice.CreateFileResponse {
	ret := _m.Called(ownerId, createFileData)

	var r0 []*fileservice.CreateFileResponse
	if rf, ok := ret.Get(0).(func(string, *models.CreateFileData) []*fileservice.CreateFileResponse); ok {
		r0 = rf(ownerId, createFileData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*fileservice.CreateFileResponse)
		}
	}

	return r0
}

// Delete provides a mock function with given fields: id, ownerId
func (_m *FileService) Delete(id string, ownerId string) error {
	ret := _m.Called(id, ownerId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(id, ownerId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteExpiredFiles provides a mock function with given fields:
func (_m *FileService) DeleteExpiredFiles() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FileReader provides a mock function with given fields: id, ownerId, token
func (_m *FileService) FileReader(id string, ownerId string, token string) (*filestorage.FileReader, error) {
	ret := _m.Called(id, ownerId, token)

	var r0 *filestorage.FileReader
	if rf, ok := ret.Get(0).(func(string, string, string) *filestorage.FileReader); ok {
		r0 = rf(id, ownerId, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*filestorage.FileReader)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(id, ownerId, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByOwner provides a mock function with given fields: id, ownerId
func (_m *FileService) GetByOwner(id string, ownerId string) (*models.File, error) {
	ret := _m.Called(id, ownerId)

	var r0 *models.File
	if rf, ok := ret.Get(0).(func(string, string) *models.File); ok {
		r0 = rf(id, ownerId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.File)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(id, ownerId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ownerId, search
func (_m *FileService) List(ownerId string, search repositories.SearchParam) ([]*models.File, error) {
	ret := _m.Called(ownerId, search)

	var r0 []*models.File
	if rf, ok := ret.Get(0).(func(string, repositories.SearchParam) []*models.File); ok {
		r0 = rf(ownerId, search)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.File)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, repositories.SearchParam) error); ok {
		r1 = rf(ownerId, search)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ScanAndSave provides a mock function with given fields: cFileData, ownerId, bucketPath, expiredAt
func (_m *FileService) ScanAndSave(cFileData *models.FileData, ownerId string, bucketPath string, expiredAt string) *fileservice.CreateFileResponse {
	ret := _m.Called(cFileData, ownerId, bucketPath, expiredAt)

	var r0 *fileservice.CreateFileResponse
	if rf, ok := ret.Get(0).(func(*models.FileData, string, string, string) *fileservice.CreateFileResponse); ok {
		r0 = rf(cFileData, ownerId, bucketPath, expiredAt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fileservice.CreateFileResponse)
		}
	}

	return r0
}
