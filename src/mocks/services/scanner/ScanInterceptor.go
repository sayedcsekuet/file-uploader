// Code generated by mockery 2.7.4. DO NOT EDIT.

package mocks

import (
	io "io"
	multipart "mime/multipart"

	mock "github.com/stretchr/testify/mock"

	scanner "file-uploader/src/services/scanner"
)

// ScanInterceptor is an autogenerated mock type for the ScanInterceptor type
type ScanInterceptor struct {
	mock.Mock
}

// Info provides a mock function with given fields:
func (_m *ScanInterceptor) Info() *scanner.Info {
	ret := _m.Called()

	var r0 *scanner.Info
	if rf, ok := ret.Get(0).(func() *scanner.Info); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*scanner.Info)
		}
	}

	return r0
}

// ScanFiles provides a mock function with given fields: files
func (_m *ScanInterceptor) ScanFiles(files []*multipart.FileHeader) *scanner.ScanResult {
	ret := _m.Called(files)

	var r0 *scanner.ScanResult
	if rf, ok := ret.Get(0).(func([]*multipart.FileHeader) *scanner.ScanResult); ok {
		r0 = rf(files)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*scanner.ScanResult)
		}
	}

	return r0
}

// ScanForVirus provides a mock function with given fields: filename, reader
func (_m *ScanInterceptor) ScanForVirus(filename string, reader io.Reader) scanner.FileScanResult {
	ret := _m.Called(filename, reader)

	var r0 scanner.FileScanResult
	if rf, ok := ret.Get(0).(func(string, io.Reader) scanner.FileScanResult); ok {
		r0 = rf(filename, reader)
	} else {
		r0 = ret.Get(0).(scanner.FileScanResult)
	}

	return r0
}

// ScanUrls provides a mock function with given fields: urls
func (_m *ScanInterceptor) ScanUrls(urls []string) *scanner.ScanResult {
	ret := _m.Called(urls)

	var r0 *scanner.ScanResult
	if rf, ok := ret.Get(0).(func([]string) *scanner.ScanResult); ok {
		r0 = rf(urls)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*scanner.ScanResult)
		}
	}

	return r0
}

// Scanner provides a mock function with given fields:
func (_m *ScanInterceptor) Scanner() scanner.Scanner {
	ret := _m.Called()

	var r0 scanner.Scanner
	if rf, ok := ret.Get(0).(func() scanner.Scanner); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(scanner.Scanner)
		}
	}

	return r0
}
