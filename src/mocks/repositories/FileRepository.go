// Code generated by mockery 2.7.4. DO NOT EDIT.

package mocks

import (
	models "file-uploader/src/models"

	mock "github.com/stretchr/testify/mock"

	repositories "file-uploader/src/repositories"
)

// FileRepository is an autogenerated mock type for the FileRepository type
type FileRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: data
func (_m *FileRepository) Create(data *models.File) (*models.File, error) {
	ret := _m.Called(data)

	var r0 *models.File
	if rf, ok := ret.Get(0).(func(*models.File) *models.File); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.File)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.File) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id, ownerId
func (_m *FileRepository) Delete(id string, ownerId string) error {
	ret := _m.Called(id, ownerId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(id, ownerId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAll provides a mock function with given fields: ids
func (_m *FileRepository) DeleteAll(ids []string) error {
	ret := _m.Called(ids)

	var r0 error
	if rf, ok := ret.Get(0).(func([]string) error); ok {
		r0 = rf(ids)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByOwnerAndId provides a mock function with given fields: id, ownerId
func (_m *FileRepository) FindByOwnerAndId(id string, ownerId string) (*models.File, error) {
	ret := _m.Called(id, ownerId)

	var r0 *models.File
	if rf, ok := ret.Get(0).(func(string, string) *models.File); ok {
		r0 = rf(id, ownerId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.File)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(id, ownerId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: id
func (_m *FileRepository) Get(id string) (*models.File, error) {
	ret := _m.Called(id)

	var r0 *models.File
	if rf, ok := ret.Get(0).(func(string) *models.File); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.File)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields:
func (_m *FileRepository) GetAll() ([]*models.File, error) {
	ret := _m.Called()

	var r0 []*models.File
	if rf, ok := ret.Get(0).(func() []*models.File); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.File)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllByOwner provides a mock function with given fields: ownerId, params
func (_m *FileRepository) GetAllByOwner(ownerId string, params repositories.SearchParam) ([]*models.File, error) {
	ret := _m.Called(ownerId, params)

	var r0 []*models.File
	if rf, ok := ret.Get(0).(func(string, repositories.SearchParam) []*models.File); ok {
		r0 = rf(ownerId, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.File)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, repositories.SearchParam) error); ok {
		r1 = rf(ownerId, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetExpiredFiles provides a mock function with given fields:
func (_m *FileRepository) GetExpiredFiles() ([]*models.File, error) {
	ret := _m.Called()

	var r0 []*models.File
	if rf, ok := ret.Get(0).(func() []*models.File); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.File)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
